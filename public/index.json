[{"authors":["admin"],"categories":null,"content":"I use a combination of methods from psychology, neuroscience, and statistics to examine how brain plasticity, memory, and mood are affected by mild traumatic injuries and neurodegenerative diseases.\nI am also passionate about using machine learning to accelerate my research via insights extracted from epidemiological studies. To this end I collaborate with researchers at the University of Victoria, McMaster University, and the IALSA research network to examine how environmental and lifestyle factors affect mental health and morbidity risk in epidemiological studies such as the Canadian Longitudinal Study of Aging.\nIn my free time I enjoy coding, reading, biking, hiking, playing guitar, listening to live music, and visiting with friends and family.\n","date":1554595200,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1554595200,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"I use a combination of methods from psychology, neuroscience, and statistics to examine how brain plasticity, memory, and mood are affected by mild traumatic injuries and neurodegenerative diseases.\nI am also passionate about using machine learning to accelerate my research via insights extracted from epidemiological studies. To this end I collaborate with researchers at the University of Victoria, McMaster University, and the IALSA research network to examine how environmental and lifestyle factors affect mental health and morbidity risk in epidemiological studies such as the Canadian Longitudinal Study of Aging.","tags":null,"title":"Dr. Craig P. Hutton","type":"authors"},{"authors":null,"categories":null,"content":" Flexibility This feature can be used for publishing content such as:\n Online courses Project or software documentation Tutorials  The courses folder may be renamed. For example, we can rename it to docs for software/project documentation or tutorials for creating an online course.\nDelete tutorials To remove these pages, delete the courses folder and see below to delete the associated menu link.\nUpdate site menu After renaming or deleting the courses folder, you may wish to update any [[main]] menu links to it by editing your menu configuration at config/_default/menus.toml.\nFor example, if you delete this folder, you can remove the following from your menu configuration:\n[[main]] name = \u0026quot;Courses\u0026quot; url = \u0026quot;courses/\u0026quot; weight = 50  Or, if you are creating a software documentation site, you can rename the courses folder to docs and update the associated Courses menu configuration to:\n[[main]] name = \u0026quot;Docs\u0026quot; url = \u0026quot;docs/\u0026quot; weight = 50  Update the docs menu If you use the docs layout, note that the name of the menu in the front matter should be in the form [menu.X] where X is the folder name. Hence, if you rename the courses/example/ folder, you should also rename the menu definitions in the front matter of files within courses/example/ from [menu.example] to [menu.\u0026lt;NewFolderName\u0026gt;].\n","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"59c3ce8e202293146a8a934d37a4070b","permalink":"/courses/example/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/courses/example/","section":"courses","summary":"Learn how to use Academic's docs layout for publishing online courses, software documentation, and tutorials.","tags":null,"title":"Overview","type":"docs"},{"authors":null,"categories":null,"content":" In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 2 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"74533bae41439377bd30f645c4677a27","permalink":"/courses/example/example1/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/example/example1/","section":"courses","summary":"In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim.","tags":null,"title":"Example Page 1","type":"docs"},{"authors":null,"categories":null,"content":" Here are some more tips for getting started with Academic:\nTip 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 4 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"1c2b5a11257c768c90d5050637d77d6a","permalink":"/courses/example/example2/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/example/example2/","section":"courses","summary":"Here are some more tips for getting started with Academic:\nTip 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus.","tags":null,"title":"Example Page 2","type":"docs"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Academic\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further talk details can easily be added to this page using Markdown and $\\rm \\LaTeX$ math code.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"96344c08df50a1b693cc40432115cbe3","permalink":"/talk/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example/","section":"talk","summary":"An example talk using Academic's Markdown slides feature.","tags":[],"title":"Example Talk","type":"talk"},{"authors":null,"categories":["R","Reproducible Research","Data Cleaning and Transformation"],"content":"\r\r1 TL;DR\r2 Introduction\r3 Basic Calculations\r4 Logical Operators\r5 Object Assignment\r6 basic summary statistics\r7 Data Structures and Object Assignment\r7.1 Numeric and Character Vectors\r7.2 logical vectors\r7.3 Factors\r7.4 Matrices\r7.5 Dataframes\r7.6 Tibbles\r\r8 random numbers and sampling\r9 functions for describing the structural information of data objects\r10 the global environment\r11 the working directory\r12 projects\r13 useful keyboard shortcuts (for R studio users)\r13.1 notes\r\r\r\r1 TL;DR\rAs the third post in the Scientist’s Guide to R series (click here for the 1st post), we advance to the brink of the next major stage of the data analysis with R process: cleaning and transforming data. However, before we can clean or transform anything we will need to know how to do a few basic things and familiarize ourselves with some common data structures in R, which are the topics of this post.\n\r2 Introduction\rYou’ve managed to import your data and are wondering what to do next? The way in which you should proceed will critically depend upon the structure of your data, but before we get there you need to know which sorts of things you can do in R. Accordingly, this post will introduce you to some basic operations and data structures. There is a lot of content here so feel free to skip sections you are already familiar with. If this is all new you should take the time to read it since we will continue building upon this foundation as we progress to more advanced topics. You need to understand how data are represented by R before you start manipulating those representations.\n\r3 Basic Calculations\rLike any decent data analysis software, R can perform common mathematical and logical operations, as simply as you probably expect them to be.\n#Basic calculations#####\r5+6 #addition\r89-28 #subtraction\r7000*10 #multiplication\r25/5 #division\r2^20 #^ means to the power of\rexp(8) #exponential\r37 %% 2 #modulus. Returns the remainder after division.\r\r4 Logical Operators\rAlso very straightforward. These are mostly useful when selecting subsets of data or programming.\n#use double equality symbols to check for equality since \u0026quot;=\u0026quot; is reserved for\r#assignment or value specification\r1 == 1 #LHS is equal to RHS\r1 != 1 #LHS is not equal to RHS\r10 \u0026gt; 8 #LHS greater than RHS\r10 \u0026gt;= 8 #LHS greater than or equal to RHS\r10 \u0026lt; 8 #LHS less than RHS\r5 \u0026lt;= 5 #LHS less than or equal to RHS\r(1 \u0026gt; 3) \u0026amp; (10 \u0026gt; 3) #are both 1 and 10 greater than 3?\r(1 \u0026gt; 3) | (10 \u0026gt; 3) #is 1 or 10 greater than 3? #see https://www.statmethods.net/management/operators.html for more examples. \r\r5 Object Assignment\rTo save some values (or virtually anything else) to use again later you assign them to a variable. This can be done in R using either “\u0026lt;-” or “=”, but “\u0026lt;-” is typically recommended. See here for the subtleties, e.g. “=” sometimes fails when you wouldn’t expect it to, but “\u0026lt;-” typically does not. R studio also provides a handy keyboard shortcut for inserting “\u0026lt;-”: [Alt] \u0026amp; [-]\nx \u0026lt;- 27 #this stores whatever is on the RHS in the arbitrarily named variable on the LHS\rx #to print it to the console, just call the variable.\r## [1] 27\r#you can assign something to a variable and print it at the same time by wrapping it in parentheses\r(y \u0026lt;- 900)\r## [1] 900\r#although doing so is uncommon, the use of arrows for assignment also enables\r#you to assign things in the opposite direction, from left to right. Arrows also\r#make it obvious which side is being assigned to which side of the operator\r90 -\u0026gt; z\rz\r## [1] 90\r#to remove a variable from your environment use the rm() function\rrm(x)\r#assigning something to a variable that is already in use will overwrite the variable\ry \u0026lt;- 8\ry\r## [1] 8\r#the only naming conventions are that a name should not begin with a\r#number, and you should avoid using names that already exist as functions in R\r#or special characters, e.g.:\r1.m \u0026lt;- 7 #starting a variable name with a number produces an error\rTRUE \u0026lt;- 9 #TRUE is a reserved keyword for the logical statement true, also results in an error\rmean \u0026lt;- 99 #here I assign the number 99 to the same name as the mean function\r#this is probably not what you want since it makes calling mean ambiguous.\rmean\rrm(mean)\r#to check if a name is already reserved for something else, just try to look up\r#the help page for it using ?name\r?mean\r#since pretty much anything can be assigned to a variable, you can also chain assignment operations\r(y \u0026lt;- 900)\r(z \u0026lt;- y \u0026lt;- 900) #store the RHS in 2 separate variables, called y and z\r#usually you would store something slightly different in each of them, e.g. a\r#modification of the 1st variable is stored in a 2nd variable\rz \u0026lt;- y + 10 z\r\r6 basic summary statistics\rR makes it incredibly easy to get simple summary statistics for numeric variables. So while we won’t dive too deeply into exploratory data analysis until later in the blog series we’ll get our toes wet here.\n#R also provides a set of basic functions for conducting common summary\r#statistic calculations\rx \u0026lt;- c(0:10)\rsum(x) #obtain the sum of the sequence of numbers from 1 to 100\r## [1] 55\rmean(x) #mean\r## [1] 5\rsd(x) #standard deviation\r## [1] 3.316625\rmedian(x) #a shortcut for the 50th percentile AKA the median\r## [1] 5\rmin(x) #the minimum\r## [1] 0\rmax(x) #the maximum\r## [1] 10\r\r7 Data Structures and Object Assignment\rMost of the things you will do in R operate upon a variety of objects.\nThe common R data structures are:\n\rVectors = a one-dimensional array of data elements/values\n\rFactors = R’s way of representing vectors as categorical variables for statistical testing and data visualization purposes.\n\rMatrices = a two-dimensional array of vectors arranged in columns and rows. All data elements are typically of the same class. Columns are rows are numbered by position from left to right (columns) and top to bottom (rows).\n\rData Frames = Also a 2D array with but column vectors can be different classes. These are the most common data structure in R.\n\rTibbles = an enhanced version of the data frame with improved display characteristics. Tibbles have gained popularity as the tidyverse has become more prominent over the past few years.\n\rLists: a list of arbitrary objects, more flexible than data frames but less intuitive to work with. Lists elements can consist of multiple different data types, including the output of statistical tests and even entire data frames. Lists are a more advanced topic so they won’t be covered further for the time being.\n\rArrays: If you want to work with matrices that have more than 2 dimensions, checkout the array function. Arrays with more than 2 dimensions (note: a 2D array is equivalent to a matrix) are not commonly used for the analysis of most forms of experimental data (e.g. I’ve never needed them), so I won’t be covering them in this blog series. Those who are interested in learning more about them can find a brief intro here, in the function documentation (?array). A more detailed treatment is provided in section 5 of the official R introductory manual\n\r\rN.B. One of the most important functions that base R provides is str(), which enables you to inspect the structure of any object.\n7.1 Numeric and Character Vectors\r#A vector is a one-dimensional array of numerical values or character strings.\r#You can create one using the c() function in R, e.g.:\rc(1, 3, 4, 5, 6)\r## [1] 1 3 4 5 6\r#to save this vector for future use, you assign it to a variable using either \u0026quot;=\u0026quot; or \u0026quot;\u0026lt;-\u0026quot;\r#it is generally recommended to use \u0026quot;\u0026lt;-\u0026quot; for assignment instead of \u0026quot;=\u0026quot;, although either will work #By wrapping the vector in str(), you gain structural information\rstr(c(1, 3, 4, 5, 6)) #a numeric vector of length 5, with values shown\r## num [1:5] 1 3 4 5 6\rc(1:100) #all numbers between a range can be specified using number:number\r## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\r## [18] 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34\r## [35] 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51\r## [52] 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68\r## [69] 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85\r## [86] 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\rstr(c(1:100)) #a numeric vector of length 100, with the 1st 10 values shown\r## int [1:100] 1 2 3 4 5 6 7 8 9 10 ...\rc(\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;) #character values/strings need to be quoted to be parsed correctly\r## [1] \u0026quot;a\u0026quot; \u0026quot;b\u0026quot; \u0026quot;c\u0026quot;\r#anything entered in quotation marks is read text/character, and if at least 1\r#element is quoted, all elements of a vector are coerced to string format\rc(\u0026quot;1\u0026quot;, 2, \u0026quot;3\u0026quot;) #prints as a character vector\r## [1] \u0026quot;1\u0026quot; \u0026quot;2\u0026quot; \u0026quot;3\u0026quot;\r#if a string vector contains only numbers, you can reclassify it as numeric\r#using as.numeric()\ras.numeric(c(\u0026quot;1\u0026quot;, 2, \u0026quot;3\u0026quot;)) #now it prints as a numeric vector\r## [1] 1 2 3\rstr(c(\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;)) #str tells us that this is a character vector of length 3\r## chr [1:3] \u0026quot;a\u0026quot; \u0026quot;b\u0026quot; \u0026quot;c\u0026quot;\rc(\u0026quot;apples\u0026quot;, \u0026quot;bananas\u0026quot;, \u0026quot;cherries\u0026quot;) #each entry is in quotations and separated by a comma\r## [1] \u0026quot;apples\u0026quot; \u0026quot;bananas\u0026quot; \u0026quot;cherries\u0026quot;\rstr(c(\u0026quot;apples\u0026quot;, \u0026quot;bananas\u0026quot;, \u0026quot;cherries\u0026quot;)) #also a character vector of length 3\r## chr [1:3] \u0026quot;apples\u0026quot; \u0026quot;bananas\u0026quot; \u0026quot;cherries\u0026quot;\rc_vect \u0026lt;- letters[seq(from = 1, to = 26)] #letters[] lets you quickly create a character vector of letters\r#There are 2 subclasses of numeric vector: #\u0026quot;integer\u0026quot;, which contains only whole numbers, and \u0026quot;double\u0026quot;(also simply called\r#numeric; both labels refer to the same thing), which has both integer and\r#decimal components\r#the class function returns the class of an object. see ?class for more info.\rx \u0026lt;- c(1, 3, 4, 5, 6)\rclass(x) #by default, both integers and doubles are classified as \u0026quot;numeric\u0026quot;\r## [1] \u0026quot;numeric\u0026quot;\rx \u0026lt;- as.integer(x) #you can coerce a vector into a different class, if it is reasonable to do so.\rclass(x) #now R reads the number list as an integer vector\r## [1] \u0026quot;integer\u0026quot;\r#to conduct a logical test to see if an object is a particular class use\r#is.[class] (insert the class name), e.g.\ris.integer(x)\r## [1] TRUE\r\r7.2 logical vectors\rl \u0026lt;- c(TRUE, FALSE, TRUE, TRUE, FALSE, TRUE) #logical vector\rl \u0026lt;- c(T, F, T, T, F, T) #equivalent short hand version\rclass(l)\r## [1] \u0026quot;logical\u0026quot;\r#\u0026quot;TRUE\u0026quot; and \u0026quot;FALSE\u0026quot;, which may be abbreviated as \u0026quot;T\u0026quot; and \u0026quot;F\u0026quot;, are also read by R as 1 and 0 respectively.\r#this conveniently enables you to obtain the total number of TRUE elements using the sum() function\rsum(l)\r## [1] 4\r#you can also get the proportion of TRUE values using the mean function\rmean(l)\r## [1] 0.6666667\r#both of these are very useful when conducting logical tests of a vector to see\r#how many elements match the specified criteria, e.g.:\rx \u0026lt;- c(1:10, 100:130)\rx \u0026lt; 50 #returns a logical vector with True corresponding to elements matching the logical test, \r## [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE FALSE\r## [12] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\r## [23] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\r## [34] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\r#in this case that the value is less than 50\rsum(x \u0026lt; 50) #how many values in x are less than 50\r## [1] 10\rmean(x \u0026lt; 50) #what proportion of the values in x are less than 50\r## [1] 0.2439024\r#using modulus 2 (divide by 2 and return the remainder) can tell you which\r#elements of a numeric vector are odd or even, which is most useful for programming.\r(x %% 2) == 0 #even values in x = TRUE\r## [1] FALSE TRUE FALSE TRUE FALSE TRUE FALSE TRUE FALSE TRUE TRUE\r## [12] FALSE TRUE FALSE TRUE FALSE TRUE FALSE TRUE FALSE TRUE FALSE\r## [23] TRUE FALSE TRUE FALSE TRUE FALSE TRUE FALSE TRUE FALSE TRUE\r## [34] FALSE TRUE FALSE TRUE FALSE TRUE FALSE TRUE\r(x %% 2) == 1 #odd values in x = TRUE\r## [1] TRUE FALSE TRUE FALSE TRUE FALSE TRUE FALSE TRUE FALSE FALSE\r## [12] TRUE FALSE TRUE FALSE TRUE FALSE TRUE FALSE TRUE FALSE TRUE\r## [23] FALSE TRUE FALSE TRUE FALSE TRUE FALSE TRUE FALSE TRUE FALSE\r## [34] TRUE FALSE TRUE FALSE TRUE FALSE TRUE FALSE\r#you can do similar tests with character vectors\rc_vect \u0026lt;- c(\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;c\u0026quot;, \u0026quot;d\u0026quot;)\rmean(c_vect == \u0026quot;a\u0026quot;) #how many elements of c_vect are \u0026quot;a\u0026quot;\r## [1] 0.4\rsum(c_vect == \u0026quot;a\u0026quot;) #what proportion of the elements of c_vect are \u0026quot;a\u0026quot;\r## [1] 2\r#logical tests are also used to subset or filter data, as demonstrated later on...\r\r7.3 Factors\r#Factors are a modified form of either a characeter or numeric vector which\r#facilitates their use as categorical variables. You can create a factor in R\r#using either the factor() function, or by reclassifying another vector type\r#using as.factor()\rx \u0026lt;- c(1:3, 1:3, 1:3)\ras.factor(x) \r## [1] 1 2 3 1 2 3 1 2 3\r## Levels: 1 2 3\r#Note the addition of levels to the output. What as.factor does is assign each\r#unique value of the vector to a level of the factor. Under the hood this also\r#involves constructing a set of 0/1 dummy variables for each level of the\r#factor, which are needed to fit some models, like linear regession models (but\r#don\u0026#39;t worry about this, because R will do it for you automatically).\r#using the factor() function instead allows you to assign labels to the levels #you can also specify whether or not the factor is ordered\rfactor(x, levels = c(1, 2, 3), labels = c(\u0026quot;one\u0026quot;, \u0026quot;two\u0026quot;, \u0026quot;three\u0026quot;), ordered = TRUE)\r## [1] one two three one two three one two three\r## Levels: one \u0026lt; two \u0026lt; three\r\r7.4 Matrices\r#the matrix() function allows you to create a matrix\r#create an empty matrix with row and column dimensions specified using nrow and\r#ncol arguments. This can be useful if you plan to fill it in later (e.g. when\r#writing loops).\rmat1 \u0026lt;- matrix(nrow = 100, ncol = 10) str(mat1) #view the structure of the new matrix\r## logi [1:100, 1:10] NA NA NA NA NA NA ...\r#take a vector and distribute the values into 2 columns with 20 rows each\rmatrix(data = c(1:40), nrow = 20, ncol = 2) \r## [,1] [,2]\r## [1,] 1 21\r## [2,] 2 22\r## [3,] 3 23\r## [4,] 4 24\r## [5,] 5 25\r## [6,] 6 26\r## [7,] 7 27\r## [8,] 8 28\r## [9,] 9 29\r## [10,] 10 30\r## [11,] 11 31\r## [12,] 12 32\r## [13,] 13 33\r## [14,] 14 34\r## [15,] 15 35\r## [16,] 16 36\r## [17,] 17 37\r## [18,] 18 38\r## [19,] 19 39\r## [20,] 20 40\r#you can combine vectors into a matrix using cbind(vector1, vector2) or\r#rbind(vector1, vector2) depending on whether you want to combine elements as\r#row vectors or column vectors. each must be the same lenght, otherwise some\r#elements will be coded as NA for the shorter vector\rx1 \u0026lt;- c(1:50)\rx2 \u0026lt;- c(51:100)\rx3 \u0026lt;- c(1:10)\r(mat1 \u0026lt;- cbind(x1, x2)) #combined by column\r## x1 x2\r## [1,] 1 51\r## [2,] 2 52\r## [3,] 3 53\r## [4,] 4 54\r## [5,] 5 55\r## [6,] 6 56\r## [7,] 7 57\r## [8,] 8 58\r## [9,] 9 59\r## [10,] 10 60\r## [11,] 11 61\r## [12,] 12 62\r## [13,] 13 63\r## [14,] 14 64\r## [15,] 15 65\r## [16,] 16 66\r## [17,] 17 67\r## [18,] 18 68\r## [19,] 19 69\r## [20,] 20 70\r## [21,] 21 71\r## [22,] 22 72\r## [23,] 23 73\r## [24,] 24 74\r## [25,] 25 75\r## [26,] 26 76\r## [27,] 27 77\r## [28,] 28 78\r## [29,] 29 79\r## [30,] 30 80\r## [31,] 31 81\r## [32,] 32 82\r## [33,] 33 83\r## [34,] 34 84\r## [35,] 35 85\r## [36,] 36 86\r## [37,] 37 87\r## [38,] 38 88\r## [39,] 39 89\r## [40,] 40 90\r## [41,] 41 91\r## [42,] 42 92\r## [43,] 43 93\r## [44,] 44 94\r## [45,] 45 95\r## [46,] 46 96\r## [47,] 47 97\r## [48,] 48 98\r## [49,] 49 99\r## [50,] 50 100\rclass(mat1)\r## [1] \u0026quot;matrix\u0026quot;\r(mat2 \u0026lt;- rbind(x1, x2)) #combined by row\r## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13]\r## x1 1 2 3 4 5 6 7 8 9 10 11 12 13\r## x2 51 52 53 54 55 56 57 58 59 60 61 62 63\r## [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25]\r## x1 14 15 16 17 18 19 20 21 22 23 24 25\r## x2 64 65 66 67 68 69 70 71 72 73 74 75\r## [,26] [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37]\r## x1 26 27 28 29 30 31 32 33 34 35 36 37\r## x2 76 77 78 79 80 81 82 83 84 85 86 87\r## [,38] [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49]\r## x1 38 39 40 41 42 43 44 45 46 47 48 49\r## x2 88 89 90 91 92 93 94 95 96 97 98 99\r## [,50]\r## x1 50\r## x2 100\rclass(mat2)\r## [1] \u0026quot;matrix\u0026quot;\r#combining vecotrs of unequal length produces NAs for the extra indices of the\r#longer one\r#common matrix operations work as expected with matrix objects in R\rt(mat1) #transposition\r## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13]\r## x1 1 2 3 4 5 6 7 8 9 10 11 12 13\r## x2 51 52 53 54 55 56 57 58 59 60 61 62 63\r## [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25]\r## x1 14 15 16 17 18 19 20 21 22 23 24 25\r## x2 64 65 66 67 68 69 70 71 72 73 74 75\r## [,26] [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37]\r## x1 26 27 28 29 30 31 32 33 34 35 36 37\r## x2 76 77 78 79 80 81 82 83 84 85 86 87\r## [,38] [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49]\r## x1 38 39 40 41 42 43 44 45 46 47 48 49\r## x2 88 89 90 91 92 93 94 95 96 97 98 99\r## [,50]\r## x1 50\r## x2 100\rt(mat1) + mat2 #addition (both matrices need to have the same dimensions)\r## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13]\r## x1 2 4 6 8 10 12 14 16 18 20 22 24 26\r## x2 102 104 106 108 110 112 114 116 118 120 122 124 126\r## [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25]\r## x1 28 30 32 34 36 38 40 42 44 46 48 50\r## x2 128 130 132 134 136 138 140 142 144 146 148 150\r## [,26] [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37]\r## x1 52 54 56 58 60 62 64 66 68 70 72 74\r## x2 152 154 156 158 160 162 164 166 168 170 172 174\r## [,38] [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49]\r## x1 76 78 80 82 84 86 88 90 92 94 96 98\r## x2 176 178 180 182 184 186 188 190 192 194 196 198\r## [,50]\r## x1 100\r## x2 200\rt(mat1) - mat2 #subtraction\r## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13]\r## x1 0 0 0 0 0 0 0 0 0 0 0 0 0\r## x2 0 0 0 0 0 0 0 0 0 0 0 0 0\r## [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25]\r## x1 0 0 0 0 0 0 0 0 0 0 0 0\r## x2 0 0 0 0 0 0 0 0 0 0 0 0\r## [,26] [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37]\r## x1 0 0 0 0 0 0 0 0 0 0 0 0\r## x2 0 0 0 0 0 0 0 0 0 0 0 0\r## [,38] [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49]\r## x1 0 0 0 0 0 0 0 0 0 0 0 0\r## x2 0 0 0 0 0 0 0 0 0 0 0 0\r## [,50]\r## x1 0\r## x2 0\rt(mat1) * mat2 #multiplication\r## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13]\r## x1 1 4 9 16 25 36 49 64 81 100 121 144 169\r## x2 2601 2704 2809 2916 3025 3136 3249 3364 3481 3600 3721 3844 3969\r## [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25]\r## x1 196 225 256 289 324 361 400 441 484 529 576 625\r## x2 4096 4225 4356 4489 4624 4761 4900 5041 5184 5329 5476 5625\r## [,26] [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37]\r## x1 676 729 784 841 900 961 1024 1089 1156 1225 1296 1369\r## x2 5776 5929 6084 6241 6400 6561 6724 6889 7056 7225 7396 7569\r## [,38] [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49]\r## x1 1444 1521 1600 1681 1764 1849 1936 2025 2116 2209 2304 2401\r## x2 7744 7921 8100 8281 8464 8649 8836 9025 9216 9409 9604 9801\r## [,50]\r## x1 2500\r## x2 10000\rt(mat1) / mat2 #division\r## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13]\r## x1 1 1 1 1 1 1 1 1 1 1 1 1 1\r## x2 1 1 1 1 1 1 1 1 1 1 1 1 1\r## [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25]\r## x1 1 1 1 1 1 1 1 1 1 1 1 1\r## x2 1 1 1 1 1 1 1 1 1 1 1 1\r## [,26] [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37]\r## x1 1 1 1 1 1 1 1 1 1 1 1 1\r## x2 1 1 1 1 1 1 1 1 1 1 1 1\r## [,38] [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49]\r## x1 1 1 1 1 1 1 1 1 1 1 1 1\r## x2 1 1 1 1 1 1 1 1 1 1 1 1\r## [,50]\r## x1 1\r## x2 1\r\r7.5 Dataframes\r#data frames can be constructed using the dataframe function,\r#or by converting a combination of vectors/matrix using as.data.frame()\rx \u0026lt;- cbind(sample(1:6), rep(c(\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;), 2)) #create a 2-column\rclass(x) #a matrix\r## [1] \u0026quot;matrix\u0026quot;\r#if names are not associated with the columns the variables are labelled using\r#V[index]\rdf \u0026lt;- as.data.frame(x) df\r## V1 V2\r## 1 6 a\r## 2 3 b\r## 3 2 c\r## 4 4 a\r## 5 5 b\r## 6 1 c\rclass(df) #now a data frame\r## [1] \u0026quot;data.frame\u0026quot;\rdf \u0026lt;- as.data.frame(x) names(df) \u0026lt;- c(\u0026quot;var_1\u0026quot;, \u0026quot;var_2\u0026quot;) #change column names using the names() function\rstr(df)\r## \u0026#39;data.frame\u0026#39;: 6 obs. of 2 variables:\r## $ var_1: Factor w/ 6 levels \u0026quot;1\u0026quot;,\u0026quot;2\u0026quot;,\u0026quot;3\u0026quot;,\u0026quot;4\u0026quot;,..: 6 3 2 4 5 1\r## $ var_2: Factor w/ 3 levels \u0026quot;a\u0026quot;,\u0026quot;b\u0026quot;,\u0026quot;c\u0026quot;: 1 2 3 1 2 3\r#create the data frame directly and specify names\rdf \u0026lt;- data.frame(\u0026quot;var_1\u0026quot; = c(sample(1:6, 6)), \u0026quot;var_2\u0026quot; = rep(c(\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;), 2)) str(df)\r## \u0026#39;data.frame\u0026#39;: 6 obs. of 2 variables:\r## $ var_1: int 4 3 1 2 5 6\r## $ var_2: Factor w/ 3 levels \u0026quot;a\u0026quot;,\u0026quot;b\u0026quot;,\u0026quot;c\u0026quot;: 1 2 3 1 2 3\r#if you don\u0026#39;t want strings to be converted to factors automatically, set\r#stringsAsFactors = FALSE\rdf \u0026lt;- data.frame(\u0026quot;var_1\u0026quot; = c(sample(1:6, 6)), \u0026quot;var_2\u0026quot; = rep(c(\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;), 2),\rstringsAsFactors = FALSE) \r\r7.6 Tibbles\r#load the tidyverse packages, which contain the tibble and as_tibble functions\rlibrary(tidyverse)\r## Warning: package \u0026#39;tidyverse\u0026#39; was built under R version 3.5.3\r## -- Attaching packages --------------------------------------------------------------------------- tidyverse 1.2.1 --\r## v ggplot2 3.1.1.9000 v purrr 0.3.2 ## v tibble 2.1.3 v dplyr 0.8.0.9014\r## v tidyr 0.8.3.9000 v stringr 1.4.0 ## v readr 1.3.1 v forcats 0.4.0\r## Warning: package \u0026#39;tibble\u0026#39; was built under R version 3.5.3\r## Warning: package \u0026#39;purrr\u0026#39; was built under R version 3.5.3\r## Warning: package \u0026#39;stringr\u0026#39; was built under R version 3.5.3\r## Warning: package \u0026#39;forcats\u0026#39; was built under R version 3.5.3\r## -- Conflicts ------------------------------------------------------------------------------ tidyverse_conflicts() --\r## x dplyr::filter() masks stats::filter()\r## x dplyr::lag() masks stats::lag()\r#convert a df or matrix to a tibble using as_tibble()\rdf \u0026lt;- data.frame(\u0026quot;var_1\u0026quot; = c(sample(1:6, 6)), \u0026quot;var_2\u0026quot; = rep(c(\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;), 2)) tbl1 \u0026lt;- as_tibble(df)\rtbl1 #printout also tells you the dimensions and class of each column\r## # A tibble: 6 x 2\r## var_1 var_2\r## \u0026lt;int\u0026gt; \u0026lt;fct\u0026gt;\r## 1 1 a ## 2 2 b ## 3 6 c ## 4 5 a ## 5 4 b ## 6 3 c\r#When creating a tibble, strings are not automatically converted to factors. #This is better from a data manipulation standpoint, which will be covered in a\r#future post on working with strings\rtbl1 \u0026lt;- tibble(\u0026quot;var_1\u0026quot; = c(sample(1:6, 6)), \u0026quot;var_2\u0026quot; = rep(c(\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;), 2)) tbl1\r## # A tibble: 6 x 2\r## var_1 var_2\r## \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt;\r## 1 5 a ## 2 3 b ## 3 4 c ## 4 1 a ## 5 6 b ## 6 2 c\r\r\r8 random numbers and sampling\r#sampling\r#obtain a random sample 6 numbers with values ranging between 1 and 40 without replacement\rsample(1:40, 6, replace=F) \r## [1] 17 16 40 21 13 1\rx \u0026lt;- c(1:30)\rx\r## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\r## [24] 24 25 26 27 28 29 30\rv \u0026lt;- sample(1:200, 100, replace=T) #sample with replacement, save it in a vector called \u0026quot;v\u0026quot;\rv\r## [1] 85 79 139 118 75 21 108 28 11 20 124 128 23 83 142 32 37\r## [18] 69 20 19 121 76 12 126 35 71 148 52 178 179 199 162 26 68\r## [35] 146 185 100 105 31 180 114 63 99 156 173 191 12 92 3 158 57\r## [52] 131 77 191 140 189 85 96 111 56 101 176 7 58 108 80 80 18\r## [69] 97 24 74 54 178 77 124 182 181 58 112 106 163 99 89 59 22\r## [86] 136 145 151 128 24 24 76 160 167 36 158 39 46 132 26\rset.seed(seed = 934) #sets criteria for random sampling for variable creation if you want it to be repeatable\rrandom.sample \u0026lt;- rnorm(1000, mean = 100, sd = 1) #create a dataset of random, normally distributed data\r#generating sequences\rseq(from = 1, to = 7, by = 1) #generate a sequence of numbers from 1 to 7, in 1 unit increments.\r## [1] 1 2 3 4 5 6 7\rseq(1, 7, 1) #specify arguments by position instead\r## [1] 1 2 3 4 5 6 7\rrep(1:10, each = 2)\r## [1] 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10\rx \u0026lt;- c(1:12) rep(x, each = 2) #create a numeric vector containing each element of x repeated twice\r## [1] 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11 11 12\r## [24] 12\rrep(seq(1, 7, 1), each = 3) #repeat a sequence\r## [1] 1 1 1 2 2 2 3 3 3 4 4 4 5 5 5 6 6 6 7 7 7\rx \u0026lt;- seq(1, 7, 1)\rrep(x, each = 3) #equivalent to the nested version\r## [1] 1 1 1 2 2 2 3 3 3 4 4 4 5 5 5 6 6 6 7 7 7\r#creating a data frame from scratch\ry \u0026lt;- c(rnorm(n = 60, mean = 100, sd = 20), rnorm(n = 10, mean = 110, sd = 20)) #creates variable y composed of 60 random scores from a normal distribution with a mean of 100 and sd of 20, along with 10 random scores from a normal distribution with a mean of 110 and sd of 20\rg \u0026lt;- factor(rep(seq(1, 7, 1), each = 10), labels = \u0026quot;g\u0026quot;, ordered = FALSE) #groups the scores from \u0026#39;y\u0026#39; into 7 sets (g1,g2,etc) containing 10 scores each\rz \u0026lt;- letters[1:5]\rdf \u0026lt;- as.data.frame(cbind(y, g, z))\rclass(df)\r## [1] \u0026quot;data.frame\u0026quot;\rclass(df$y)\r## [1] \u0026quot;factor\u0026quot;\rdf$y \u0026lt;- as.numeric(df$y) #convert to numeric\rclass(df$z) #check the class of variable \u0026quot;Z\u0026quot;\r## [1] \u0026quot;factor\u0026quot;\rclass(df$g) #check the class of variable \u0026quot;g\u0026quot;\r## [1] \u0026quot;factor\u0026quot;\r\r9 functions for describing the structural information of data objects\rlength(c(1:100)) #number of elements in a vector = the length of the vector\r## [1] 100\rdata \u0026lt;- mtcars #we\u0026#39;ll use the built-in mtcars dataframe as an example again\rlength(data) #when used on a matrix or data frame, returns the number of columns\r## [1] 11\rnrow(data) #number of rows\r## [1] 32\rncol(data) #number of columns\r## [1] 11\rdim(data) #returns the number of rows and columns of the object\r## [1] 32 11\runique(data$cyl) #display the unique values of the specified variable\r## [1] 6 4 8\r#useful applications of the unique() function include making it easier to\r#construct factors (since you need to know what the unique values are) and\r#making it easier to identify data entry errors (to be demonstrated in a future\r#post)\rlevels(as.factor(data$cyl)) #this is the same as unique but for factors. \r## [1] \u0026quot;4\u0026quot; \u0026quot;6\u0026quot; \u0026quot;8\u0026quot;\r#It provides the added benefit of revealing the order of factor levels.\r#show the unique values of a vector (top line) #as well as the count of each (bottom line)\rtable(data$cyl) \r## ## 4 6 8 ## 11 7 14\r#of course the str() function, which we\u0026#39;ve already covered is incredibly\r#versatile and informative\rstr(data$cyl) #the structure of a variable within a dataframe\r## num [1:32] 6 6 4 6 8 6 8 4 4 6 ...\rstr(data) #the structure of a whole dataframe\r## \u0026#39;data.frame\u0026#39;: 32 obs. of 11 variables:\r## $ mpg : num 21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\r## $ cyl : num 6 6 4 6 8 6 8 4 4 6 ...\r## $ disp: num 160 160 108 258 360 ...\r## $ hp : num 110 110 93 110 175 105 245 62 95 123 ...\r## $ drat: num 3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\r## $ wt : num 2.62 2.88 2.32 3.21 3.44 ...\r## $ qsec: num 16.5 17 18.6 19.4 17 ...\r## $ vs : num 0 0 1 1 0 1 0 1 1 1 ...\r## $ am : num 1 1 1 0 0 0 0 0 0 0 ...\r## $ gear: num 4 4 4 3 3 3 3 4 4 4 ...\r## $ carb: num 4 4 1 1 2 1 4 2 2 4 ...\rstr(table) #the structure of a function\r## function (..., exclude = if (useNA == \u0026quot;no\u0026quot;) c(NA, NaN), useNA = c(\u0026quot;no\u0026quot;, ## \u0026quot;ifany\u0026quot;, \u0026quot;always\u0026quot;), dnn = list.names(...), deparse.level = 1)\r#the tidyverse alternative to str is the glimpse function(), which is\r#specialized for displaying the structural info of dataframes and tibbles,\r#providing a slightly nicer printout, and enabling you to peak at the structure\r#of the data in the middle of a series of \u0026quot;piped\u0026quot; or \u0026quot;chained\u0026quot; operations\r#without interrupting the sequence (more on this in the next post).\rlibrary(tidyverse)\rdf \u0026lt;- data.frame(\u0026quot;var_1\u0026quot; = c(sample(1:6, 6)), \u0026quot;var_2\u0026quot; = rep(c(\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;), 2)) glimpse(df)\r## Observations: 6\r## Variables: 2\r## $ var_1 \u0026lt;int\u0026gt; 6, 4, 1, 2, 3, 5\r## $ var_2 \u0026lt;fct\u0026gt; a, b, c, a, b, c\r\r10 the global environment\rThe functions you use in R operate within what is called the global environment, which consists of the functions and other objects that you have loaded in the current R session (this is what happens you load a package with the library function), as well as any variables, data objects, or functions you have created during the session.\n#to get a list of the objects in your global environment, use the ls() function\rls()\r## [1] \u0026quot;c_vect\u0026quot; \u0026quot;data\u0026quot; \u0026quot;df\u0026quot; \u0026quot;g\u0026quot; ## [5] \u0026quot;l\u0026quot; \u0026quot;mat1\u0026quot; \u0026quot;mat2\u0026quot; \u0026quot;random.sample\u0026quot;\r## [9] \u0026quot;tbl1\u0026quot; \u0026quot;v\u0026quot; \u0026quot;x\u0026quot; \u0026quot;x1\u0026quot; ## [13] \u0026quot;x2\u0026quot; \u0026quot;x3\u0026quot; \u0026quot;y\u0026quot; \u0026quot;z\u0026quot;\r\r11 the working directory\rR is always connected to a specific folder on your computer called the working directory, which is the default path for loading/importing files or saving/exporting them\n#to view your current working directory, use the getwd() function, or you can\r#click on the \u0026quot;files\u0026quot; tab in the bottom right pane of R studio.\rgetwd()\r#you can change your working directory using the setwd() function, #or you can use the \u0026quot;set working directory\u0026#39; menu under the \u0026quot;Session\u0026quot; drop down\r#menu along the top of the R studio window, #or you can just use the keyboard shortcut Ctrl + Shift + H\rsetwd(\u0026quot;C:/Users/CPH/Documents/\u0026quot;)\r\r12 projects\rThe projects feature of R studio makes it much easier to keep your work organized, and using it is strongly recommended if you are working on anything that will take longer than one or two sessions to complete.\nYou can create/start a project using the projects menu by clicking on this button:\nYou can find it in the top right corner of R studio, directly below the minimize/maximize/exit buttons. Creating (or loading) a package also sets the working directory to the project folder automatically.\n\r13 useful keyboard shortcuts (for R studio users)\rOne of the great benefits of using R studio are the keyboard shortcuts that speed up the coding process. Here are some I’ve found to be useful:\n\rassignment operator \u0026lt;-: [Alt] + [-]\n\rextract variable: [Ctrl] + [Alt] + [v]. Highlight some code, use this shortcut, and enter the variable name\n\rcomment lines in/out: [Ctrl] + [Shift] + [c]\n\rreflow comments: highlight/select comments and use [Ctrl] + [Shift] + [/] to reflow/wrap them for easier reading.\n\rreindent lines: use [Ctrl] + [i] to realign the indentation of your R code so it is easier to read.\n\rinsert code section title: [Ctrl] + [Shift] + [r]. This can also be done by starting a line with # to comment it out, and ending it with #### or —-\n\ropen/close the R script outline, which contains a list of the code sections you’ve defined using the code section titles that can be clicked on to quickly navigate through your script: [Ctrl] + [Shift] + [o]\n\rview the definition of a function: press [F2] when the cursor is on a function name\n\r\rN.B. To see all available keyboard shortcuts use [Alt] + [Shift] + [K] or click “keyboard shortcuts help” under the R studio help menu. Many of the more useful ones are also accessible under the R studio code menu.\n13.1 notes\r\rA link to the next post (data manipulation part 1) will be added in the near future.\n\rFor more details on the data structures and operations introduced in this post, you may find the official R introductory manual or Michael Crawley’s “The R Book” helpful.\n\r\rThank you for visiting my blog. I welcome any suggestions for future posts, comments or other feedback you might have. Feedback from beginners and science students/trainees (or with them in mind) is especially helpful in the interest of making this guide even better for them.\n\r\r","date":1565049600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1565049600,"objectID":"20378f5da6053db32dee0638dd159aa7","permalink":"/post/2019-08-06-asgr-2-0-basic-operations-and-data-structures/","publishdate":"2019-08-06T00:00:00Z","relpermalink":"/post/2019-08-06-asgr-2-0-basic-operations-and-data-structures/","section":"post","summary":"1 TL;DR\r2 Introduction\r3 Basic Calculations\r4 Logical Operators\r5 Object Assignment\r6 basic summary statistics\r7 Data Structures and Object Assignment\r7.1 Numeric and Character Vectors\r7.2 logical vectors\r7.3 Factors\r7.4 Matrices\r7.5 Dataframes\r7.6 Tibbles\r\r8 random numbers and sampling\r9 functions for describing the structural information of data objects\r10 the global environment\r11 the working directory\r12 projects\r13 useful keyboard shortcuts (for R studio users)\r13.","tags":["R","R basics"],"title":"A Scientist's Guide to R: Step 2.0. Basic Operations \u0026 Data Structures","type":"post"},{"authors":null,"categories":["Neuroscience"],"content":"\r\n\r\n\r\n\r\n","date":1563926400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1563926400,"objectID":"7c5a3e64ec60e4c7a43b19aafb3451a5","permalink":"/publication/2019-07-24-aujla-et-al-2013/aujla-et-al-2013/","publishdate":"2019-07-24T00:00:00Z","relpermalink":"/publication/2019-07-24-aujla-et-al-2013/aujla-et-al-2013/","section":"publication","summary":"","tags":null,"title":"Assessing anxiety and reward-related behaviors following alcohol administration or chronic stress","type":"publication"},{"authors":null,"categories":["R","Reproducible Research"],"content":"\r\r1 TL;DR\r2 Introduction\r3 Installing and loading R packages\r4 How to get your data into R\r4.1 comma delimited files (.csv) files\r4.2 tab delimited (.txt) files\r4.3 files with other delimiting characters (also .txt)\r4.4 Microsoft Excel files (.xlsx, .xls)\r4.5 files from SPSS, SAS, or Stata\r4.6 fixed width files (.txt, .gz, .bz2, .xz, .zip, etc.)\r4.7 html/xml files\r4.8 JavaScript Object Notation (JSON) files\r4.9 notes\r\r\r\r1 TL;DR\rAs the second post in the Scientist’s Guide to R series (click here for the 1st post), this post will goes into the first step of the data analysis with R process: importing your data from a variety of common “flat file” sources (.csv, .txt, .xlsx, etc).\n\r2 Introduction\rSo you’ve spent weeks/months/years conducting a carefully planned research project and collected a bunch of data, and want to know how the study turned out using the advanced functionality of R? The first things you will need to do are:\n\ri) Install R \u0026amp; R studio. Install R using this link. The R studio integrated development environment (IDE) is available here (R studio is not necessary to use R but it is strongly recommended). For instructions on using R studio, see these videos.\n\rii) install and load R add-on packages.\n\riii) import your data.\n\r\rAfter you’ve installed R studio, read on for a brief explanation of how to install and load R packages. These additional packages greatly expand the functionality of R (e.g. allow you to build webpages like this blog using the blogdown package), making it much easier to learn and use. While there are many different ways to do things using R, this guide will cover the ways I have found in practice to have the right balance of effectiveness, efficiency, and accessibility/transparency. There are many excellent books and online resources for those wanting to learn more about alternative methods. However, to avoid confusing those attempting to learn data analysis with R for the 1st time, the scope of these tutorials will be limited to recommended methods only.\nAfter explaining how to install and load R packages, this post will cover how to easily import data from a variety of common sources ranging from comma-separated-variable (.csv) files, to excel spreadsheets, and fixed width files.\n\r3 Installing and loading R packages\rInstalling \u0026amp; loading packages into R is a very straightforward process. For packages hosted on CRAN (which is where the “official” versions of most R packages reside), simply run the following:\n#To include comments in R (like this), begin the comment with \u0026quot;#\u0026quot;, which will tell R\r#to treat the following info as a comment and not try to run it as live R code.\r#installation command\rinstall.packages(\u0026quot;package_name\u0026quot;) #replace \u0026quot;package_name\u0026quot; with the name of the package # you want to install\r#load the package when you want to use it using the base R library() function\rlibrary(package_name) #replace \u0026quot;package_name\u0026quot; with the name of the package #you\u0026#39;ve installed and want to use\r# for example, some of the functions I recommend below for importing data use\r# the readr package, which is part of the tidyverse suite of pacakges:\rinstall.packages(\u0026quot;readr\u0026quot;) #replace \u0026quot;package_name\u0026quot; with the name of the package library(readr)\r#or if you want all of the tidyverse packages (which we will be using throughout this guide)\rinstall.packages(\u0026quot;tidyverse\u0026quot;)\rlibrary(tidyverse) #loads readr along with other helpful packages, like ggplot2 for graphing.\rFor packages hosted on GitHub, which are typically in development, the process is slightly more complicated but still requires only couple of lines of code:\n#1. first install and load the devtools package\r#install devtools from CRAN\rinstall.packages(\u0026quot;devtools\u0026quot;)\r#load the devtools package\rlibrary(devtools)\r#2. install the package of interest from its github repository using # the install_github function()\rinstall_github(\u0026quot;repository_name/package_name\u0026quot;)\r# For example, to get the development version of the tidyr package, # which contains excellent new functions for converting between the long and wide # forms of data (there will be a later post on this), you would run:\rinstall_github(\u0026quot;tidyverse/tidyr\u0026quot;) #contains more flexible # pivoting functions than the CRAN version of tidyr.\r# Packages installed from GitHub can then also be loaded using the library() function # and the package name only:\rlibrary(tidyr)\r#N.B. If you are using R studio, you can also install packages from CRAN # by clicking on the packages tab of the lower right panel and clicking the \u0026quot;Install\u0026quot; button\r\r4 How to get your data into R\rGetting your data into R is also easy. Commands and packages specific to different data sources are listed below:\n4.1 comma delimited files (.csv) files\rCSV files are the most common type of data file you’ll encounter as a data analyst. These can be imported using the read_csv() function from the readr package.\n#using the readr package:\rlibrary(readr)\rread_csv(\u0026quot;directory_path/filename.csv\u0026quot;) #e.g. C:/Users/your_name/Desktop/documents/data.csv\r# If you want to use the data after importing it, assign it to be stored in an object using # the assignment operator: \u0026quot;\u0026lt;-\u0026quot;\rdata \u0026lt;- read_csv(\u0026quot;directory_path/filename.csv\u0026quot;)\r# N.B. If you are using R studio, you can use the keyboard shortcut # [\u0026quot;alt\u0026quot; + \u0026quot;-\u0026quot;] to insert \u0026quot;\u0026lt;-\u0026quot; # you can then examine the data by simply running the assigned name\rdata\r# or clicking on it in the \u0026quot;environment\u0026quot; window in R studio (by default it is # in the top right panel)\r\r4.2 tab delimited (.txt) files\rlibrary(readr)\rdata \u0026lt;- read_tsv(\u0026quot;directory_path/filename.txt\u0026quot;)\r#yes, it is that easy ;)\r\r4.3 files with other delimiting characters (also .txt)\rThe read_csv() and read_tsv() functions are actually convienience wrappers for the workhorse function of the readr package, read_delim(), which can be used to read in data files with any delimiting character (e.g. “-”, “$”, etc.). This is only slightly more complicated, in that you have to specify what the delimiting character is using the delim argument.\nlibrary(readr)\rdata \u0026lt;- read_delim(\u0026quot;directory_path/filename.txt\u0026quot;, delim = \u0026quot;|\u0026quot;) # specify the file path/name.txt and the delimiting character, # whatever it happens to be for your data file\r\r4.4 Microsoft Excel files (.xlsx, .xls)\rExcel files are fairly easy to import using the readxl package. Since these files may contain several speadsheets, you also have to specify the sheet that you want to use… unless it is the first one, which is assumed by default.\nlibrary(readxl)\r# If you want the first sheet then you can just specify the path\rdata \u0026lt;- read_excel(path = \u0026quot;path/file.xlsx\u0026quot;)\r# If you want a different sheet then you have to specify which one using the sheet argument\rdata \u0026lt;- read_excel(path = \u0026quot;path/file.xlsx\u0026quot;,\rsheet = \u0026quot;sheet_name\u0026quot;)\r# Using the excel_sheets helper function makes things easier by showing you what the names # of each sheet are in the excel file.\rexcel_sheets(\u0026quot;path/file.xlsx\u0026quot;)\r# You can also specify the sheet using an integer\rdata \u0026lt;- read_excel(path = \u0026quot;path/file.xlsx\u0026quot;,\rsheet = 2) #to get the 2nd sheet\r\r4.5 files from SPSS, SAS, or Stata\rIf you’ve recently switched from working in SPSS, SAS, or Stata (or are collaborating with someone who uses these programs), you can also easily import your existing SPSS or SAS data files directly into R using the haven package.\nlibrary(haven)\r#SAS files\rdata \u0026lt;- read_sas(\u0026quot;file_name.sas7bdat\u0026quot;) #if the file is in your working directory\r#otherwise specify the file path as well, e.g. \u0026quot;path/file_name.sas7bdat\u0026quot;\r#SPSS files\rdata \u0026lt;- read_sav(\u0026quot;file_name.sav\u0026quot;)\r#Stata files\rdata \u0026lt;- read_dta(\u0026quot;file_name.dta\u0026quot;)\r\r4.6 fixed width files (.txt, .gz, .bz2, .xz, .zip, etc.)\rFixed width files are a less common type of data source where the values are separated not by tabs or specific characters but a set amount of white/empty space other than a tab. These can be loaded using the read_fwf() function in readr.\nlibrary(readr)\r# For these fixed width files, you can specify column positions (i.e. breaks between values)\r# in multiple ways. See https://readr.tidyverse.org/reference/read_fwf.html, # which I used to obtain templates of the commands below, for further details.\r# The main arguments you need to include are file = the file path/name.extension,\r# col_positions, and col_names().\r# the col_positions argument is different from the others we\u0026#39;ve see so far (e.g. delim) # in that it is primarily intended to be used by specifying a call to another function, # such as fwf_empty (see below), which tells read_fwf() how you want to specify the columns.\r# some options are:\r# 1. Guess based on position of empty columns using the fwf_empty helper function # as an argument(easiest):\rfile_path \u0026lt;- c(\u0026quot;directory_path/filename.txt\u0026quot;) #store the file path/name as \u0026quot;file_path\u0026quot;\rdata \u0026lt;- read_fwf(file = file_path,\rcol_positions = fwf_empty(file_path, col_names = c(\u0026quot;col_1\u0026quot;, \u0026quot;col_2\u0026quot;, \u0026quot;col_3\u0026quot;)) #replace the above labels with column names you want to use.\r#note that col_names is an argument supplied to the fwf_empty helper function\r#which is then passed along to the read_fwf function.\r# 2. Using a vector of field widths (a bit more tedious) with # the fwf_widths() helper function:\rdata \u0026lt;- read_fwf(file = file_path,\rcol_positions = fwf_widths(c(10, 7, 19, 290),\r#replace the above with values appropriate to your data col_names = c(\u0026quot;col_1\u0026quot;, \u0026quot;col_2\u0026quot;, \u0026quot;col_3\u0026quot;))\r# 3. Specifying starting and ending positions of the columns with paired vectors\r# using the fwf_positions() helper function\rread_fwf(file = file_path, fwf_positions(start = c(1, 50), #which positions do the columns start at\rend = c(25, 75), #which positions do the columns end at\rcol_names = c(\u0026quot;col_1\u0026quot;, \u0026quot;col_2\u0026quot;))) #list of column names\r# 4. Using named arguments for starting and ending positions with # the fwf_cols() helper function:\rread_fwf(file = file_path, col_positions = fwf_cols(name = c(1, 10), birthdate = c(20, 50),\rage = c(60, 63)))\r# 5. Via named arguments and column widths, also using the fwf_cols helper function:\rread_fwf(file = file_path,\rfwf_cols(subject_id = 15, #e.g. the subject_id column contains data in the 1st 15 characters of each row\rtest_score = 20))\r\r4.7 html/xml files\rThose who need to scrape data from the web for their research can use the rvest and XML packages. Since this is not what most experimental scientists (at least among the many I’ve had the pleasure of meeting) will need to do, I have only provided the necessary functions below without a detailed explanation. See this blog post for further details.\n#HTML pages\rlibrary(rvest)\r#store the url\rurl \u0026lt;- c(\u0026quot;http://www.webpagename.com\u0026quot;)\r#read in the html data\rweb_page \u0026lt;- read_html(url)\r#extract the html info for the target table\rweb_page_table \u0026lt;- html_nodes(web_page, \u0026quot;table\u0026quot;)\r#parse the html table info into a data set that you can use in R data \u0026lt;- html_table(web_page_table, fill = TRUE)\r#XML\rlibrary(XML)\r#read in the html data\rdata \u0026lt;- readHTMLTable(url)\r\r4.8 JavaScript Object Notation (JSON) files\rJSON files are way of storing JavaScript objects as text that can easily be imported in to R using the fromJSON() function from the jsonlite package. Science trainees are unlikely to encounter this type of data unless they are working with web sources, e.g. twitter. See this link for an accessible overview.\nlibrary(jsonlite)\rr_bloggers_data \u0026lt;- fromJSON(\u0026quot;~/Desktop/r-bloggers.json\u0026quot;)\rClick here for the next post (on basic operations and data structures) in R.\n\r4.9 notes\r\rExporting data is also easy and will be covered in a later post. E.g. for readr functions this is usually done via the appropriately named write_ functions, like write_csv().\n\rBy default, the above readr functions will assume that the first row of your data file contains the variable names. For these functions, you can disable this by setting the col_names argument to FALSE, or you can provide a string/character vector of names to use instead by setting col_names to the name of the string vector (see the next post for more on data vectors).\n\rArguments to a function can either be specified by name (which I have done here for the sake of transparency) or by position to save some typing. E.g. read_fwf(file_path, fwf_cols(subject_id = 15, test_score = 20)) is equivalent to the read_fwf syntax I provided above with argument names specified. There will be more on this in the next section of the blog.\n\rAn R package only needs to be loaded once in an R session for the functions it contains to be available for use throughout the same session.\n\rThere are also ways to import data from relational databases using SQL syntax. However, these methods go beyond the scope of this blog series since they are not relevant to most academic researchers and may be covered in the distant future if/when I write a second volume on R for machine learning and data science. An introduction to importing data from these sources can be found here. Those who are interested in starting to learn SQL (e.g. for work) would benefit from the free Introduction to SQL for Data Science course provided by datacamp.com, which is where I started learning how to use SQL.\n\rUsers working with large flat files (\u0026gt; 100 MB) may want to consider the vroom function in the vroom package or fread function in the data.table package instead of readr to import their data. You could use these for flat files of any size, but the speed difference probably won’t really be noticable for smaller files.\n\r\rThank you for reading and I welcome any suggestions for future posts, comments or other feedback you might have. Feedback from beginners and science students/trainees (or with them in mind) is especially helpful in the interest of making this guide even better for them.\n\r\r","date":1561161600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1561161600,"objectID":"514b4c5f6244a81280540a1bbe95b075","permalink":"/post/2019-06-22-asgr-1-getting-data-into-r/","publishdate":"2019-06-22T00:00:00Z","relpermalink":"/post/2019-06-22-asgr-1-getting-data-into-r/","section":"post","summary":"1 TL;DR\r2 Introduction\r3 Installing and loading R packages\r4 How to get your data into R\r4.1 comma delimited files (.csv) files\r4.2 tab delimited (.txt) files\r4.3 files with other delimiting characters (also .txt)\r4.4 Microsoft Excel files (.xlsx, .xls)\r4.5 files from SPSS, SAS, or Stata\r4.6 fixed width files (.txt, .gz, .bz2, .xz, .zip, etc.)\r4.7 html/xml files\r4.8 JavaScript Object Notation (JSON) files\r4.","tags":["R","R Basics","Data Analysis","Importing Data"],"title":"A Scientist's Guide to R: Step 1. Getting Data into R","type":"post"},{"authors":null,"categories":["R","Data Analysis","Statistics","Reproducible Research"],"content":" Introduction This tutorial will be the first of many blog posts for new researchers and science program students/trainees on how to use R as an analytical and productivity tool in the process of conducting scientific research. Specifically, in this post I will explain why you might want to use R and provide a brief overview of the basic R workflow used in the analysis of experimentally obtained data.\nAs someone who has spent many years analyzing data using a variety of technologies (e.g. SPSS, Excel, R), I know how intimidating and frustrating it can be to start learning R for the first time instead of using the simple point-and-click graphical user interfaces (GUIs) provided by commercial (i.e. paid) programs like SPSS. These programs work fine for implementing many simple and common analytical methods (e.g. t-tests, one-way ANOVAs to compare 2+ groups to one another on a single dependent measure) but as your research questions and data structures become more complicated (e.g. predictive modelling, working with non-normally distributed data), you will quickly find the functionality of these GUI-based programs to be rather limited. For me, this realization occured as a new graduate student at McMaster when I wanted to test a complex experimental hypothesis to see if there was a difference between one experimental group and several other groups (simultaneously, thereby avoiding the need to correct p-values for multiple comparisons) using a linear contrast within a factorial ANOVA (the subject of a future blog post). You also have to pay to use commercial statistical packages, which can be a significant barrier for low-income students or even reseach labs struggling to maintain operating funds (which is most labs in Canada given the ~15% current funding rate).\nIn contrast, R is constantly undergoing development by a large community of statisticians, scientific researchers, and other data science professionals, offering a way to use pretty much any analytical tool out there. Moreover, as long as researchers and statisticians continue preferring to develop novel analytical methods in R, it will continue to be the most advanced statistical software available. However, the fact that so many people are developing R also means that for any given analytical method of interest there will be multiple different ways of using it in R, each potentially requiring very different syntax. Thus, knowing which of the many options to use can be a huge challenge for new useRs. As someone with experience training researchers to use R, and who has spent countless hours exploring the many options available to do different things in R, a major purpose of this blog will be to demonstrate how to use R for data analysis and boost your research productivity using methods that I have found to work best (from a scientific research perspective) in practice.\nOnce you know what you are doing (e.g. from reading these posts), R can arguably be even easier to use than commercial programs. This is clearly demonstrated by the fact that one can accomplish a great deal with only a few lines of code, e.g. a simple linear regression requires only a single line of code (to be covered in more detail in a future post):\nsummary(lm(Y ~ X, data = your_dataset))  With this line you ask R for a (regression) summary of a linear model (lm) where Y is a continuous outcome variable, X is a predictor, X and Y are contained in the dataframe \u0026ldquo;your_dataset\u0026rdquo;, and \u0026ldquo;~\u0026rdquo; means \u0026ldquo;as a function of\u0026rdquo;. You would have to click through seveal menus to obtain the same results in a GUI-based program.\nPerhaps the greatest benefit of using R is that once you have written a script to conduct an analysis, you can reproduce that analysis with new data simply by re-running the script (updating variable names as needed). When combined with R Markdown, you can generate reproducible reports which make collaboration and communication of your results much easier. Think of just re-running a script a collaborator has written in R vs. following a set of step-by-step instructions to reproduce an analysis done via SPSS or Excel. The former usually takes less than a minute, while the latter could take hours and depends on how good your colleague\u0026rsquo;s instructions are. Since R is a fully functional programming language, things get even better when you start automating repetitive processess using loops.\nAnother major advantage of using R is of course that it is free.\nworkflow outline Now that we know why you should use R, what are the main steps of analyzing data? My typical analytical workflow follows these 7 steps:\n 0. Install and load necessary packages (e.g. tidyverse) 1. Import the data. 2. Clean/Transform the data. This part usually takes longer than the analysis, but may not be necessary if you\u0026rsquo;ve entered the data yourself. 3. Explore the data using descriptive summary statistics and visualizations. 4. Resolve structural issues. If any issues are detected in step 3, go back to step 2 and resolve them, restructuring data as needed. 5. Model: Fit an appropriate statistical model \u0026amp; check model assumptions (e.g. normality). Use a different model/test if assumptions are violated (e.g. a permutation test). Conduct follow-up or post-hoc tests if desired. 6. Analyze and Interpret the results using appropriate graphics (e.g. tables/figures) and text summaries. These can easily be used as a foundation for building presentation slides or the results section of a manuscript. 7. Communicate the results to the target audience (e.g. other scientists) with a description of the methods used, relevant background/introduction and insightful discussion in a coherent and accessible report.   This represents the basic steps involved in the majority of data analysis tasks that one typically encounters in the social and behavioural sciences. As you might expect, for machine learning projects there are a few extra steps involved.\nEach of these sections will be covered in detail in future posts. Thanks for reading and I welcome any suggestions for future posts, comments or other feedback you might have.\nClick here to continue to the next post on installing R, R packages, and importing data.\nThis post has been peer-reviewed and approved by the University of Victoria Data Science Studio\nNote: The workflow I recommend above is very similar to the well-known data science workflow advocated by Grolemund and Wickham in their R for data science book. However, an important difference is that I recommend that most/all of the exploration and wrangling of the data be completed prior to advancing to the modelling stage. The idea is to sort out the structure of your final analytical dataset first and fit fewer models to save time.\n","date":1558051200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1558051200,"objectID":"2cd0a4d9015b48e04820425cf8875786","permalink":"/post/2019-05-17-asgr-basic-workflow/","publishdate":"2019-05-17T00:00:00Z","relpermalink":"/post/2019-05-17-asgr-basic-workflow/","section":"post","summary":"Introduction This tutorial will be the first of many blog posts for new researchers and science program students/trainees on how to use R as an analytical and productivity tool in the process of conducting scientific research. Specifically, in this post I will explain why you might want to use R and provide a brief overview of the basic R workflow used in the analysis of experimentally obtained data.\nAs someone who has spent many years analyzing data using a variety of technologies (e.","tags":["R","R Basics","Data Analysis","Statistics"],"title":"A Scientist's Guide to R: Introduction and Basic Workflow","type":"post"},{"authors":["Dr. Craig P. Hutton"],"categories":null,"content":" Click the Slides button above to demo Academic\u0026rsquo;s Markdown slides feature.   Supplementary notes can be added here, including code and math.\n","date":1554595200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554595200,"objectID":"557dc08fd4b672a0c08e0a8cf0c9ff7d","permalink":"/publication/preprint/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/preprint/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example preprint / working paper","type":"publication"},{"authors":[],"categories":[],"content":" Welcome to Slides Academic\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = \\;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \nA fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears  Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view   Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links   night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links  Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/img/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}  Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Academic's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"d1311ddf745551c9e117aa4bb7e28516","permalink":"/project/external-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/external-project/","section":"project","summary":"An example of linking directly to an external project website using `external_link`.","tags":["Demo"],"title":"External Project","type":"project"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"8f66d660a9a2edc2d08e68cc30f701f7","permalink":"/project/internal-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/internal-project/","section":"project","summary":"An example of using the in-built project page.","tags":["Deep Learning"],"title":"Internal Project","type":"project"},{"authors":["Dr. Craig P. Hutton","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Click the Slides button above to demo Academic\u0026rsquo;s Markdown slides feature.   Supplementary notes can be added here, including code and math.\n","date":1441065600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1441065600,"objectID":"966884cc0d8ac9e31fab966c4534e973","permalink":"/publication/journal-article/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/journal-article/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example journal article","type":"publication"},{"authors":["Dr. Craig P. Hutton","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Click the Slides button above to demo Academic\u0026rsquo;s Markdown slides feature.   Supplementary notes can be added here, including code and math.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"69425fb10d4db090cfbd46854715582c","permalink":"/publication/conference-paper/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/conference-paper/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example conference paper","type":"publication"}]